{
    "collab_server" : "",
    "contents" : "\nrOptDesignInhibitionPSO <- function(D_INFO, PSO_INFO) {\n  \n  # model, dSupp, nSupp, dPara, sUB(vec), sLB(vec), pUB(vec), pLB(vec)\n  DESIGNINFO <- c(D_INFO$model, D_INFO$dSupp, \n                  D_INFO$nSupp, D_INFO$dPara, \n                  D_INFO$dsUpper, D_INFO$dsLower, \n                  D_INFO$paraUpper, D_INFO$paraLower)\n\n  # LoopID, Maximize, Terminate by MaxIter, dSwarm, nSwarm, maxIter, Tolerence, c1, c2, vmaxK, w0, w1, wv, chi, numNB\n  PSOOPTIONS <- rbind(\n    c(1, 1, 1, D_INFO$nSupp*(D_INFO$dSupp + 1) - 1,  \n      PSO_INFO$OUTER$nSwarm, PSO_INFO$OUTER$maxIter, 1e-6, \n      PSO_INFO$OUTER$c1, PSO_INFO$OUTER$c2, PSO_INFO$OUTER$vk, \n      PSO_INFO$OUTER$w0, PSO_INFO$OUTER$w1, PSO_INFO$OUTER$wv, 1, 0), # OUTER\n    c(2, 0, 1, D_INFO$dPara,  \n      PSO_INFO$INNER$nSwarm, PSO_INFO$INNER$maxIter, 1e-6, \n      PSO_INFO$INNER$c1, PSO_INFO$INNER$c2, PSO_INFO$INNER$vk, \n      PSO_INFO$INNER$w0, PSO_INFO$INNER$w1, PSO_INFO$INNER$wv, 1, 0),# INNER\n    c(3, 1, 1, D_INFO$nSupp*(D_INFO$dSupp + 1) - 1, \n      PSO_INFO$LOACL$nSwarm, PSO_INFO$LOACL$maxIter, 1e-6, \n      PSO_INFO$LOACL$c1, PSO_INFO$LOACL$c2, PSO_INFO$LOACL$vk, \n      PSO_INFO$LOACL$w0, PSO_INFO$LOACL$w1, PSO_INFO$LOACL$wv, 1, 0),# LOCAL\n    c(4, 0, 1, 1, 64, 400, 1e-6, 2, 2, 2, .95, .2, .8, 1, 0)  # ASSIST\n  )\n  \n  pout <- aout <- dout <- NULL\n  if (all(D_INFO$paraUpper == D_INFO$paraLower)) {\n    # Locally D-optimal Design\n    cputime <- system.time({\n      pout <- NESTEDPSO(3, PSOOPTIONS, DESIGNINFO, DESIGNINFO[9:(9+D_INFO$dPara-1)])\n    })[3]\n    dout <- QUICKDISPERSION(pout$fGBest, pout$GBest, DESIGNINFO[9:(9+D_INFO$dPara-1)], DESIGNINFO)\n  } else {\n    # Standardized maximin Design\n    cputime <- system.time({\n      pout <- NESTEDPSO(1, PSOOPTIONS, DESIGNINFO, 0)\n    })[3]\n    aout <- MUSEARCH(pout$fGBest, pout$GBest, PSOOPTIONS, DESIGNINFO)\n    dout <- QUICKDISPERSION(pout$fGBest, pout$GBest, c(aout$Mu, aout$Mu_w), DESIGNINFO)\n  }\n \n  list(DESIGN = matrix(c(pout$GBest, 1 - sum(pout$GBest[(D_INFO$nSupp*2+1):(D_INFO$nSupp*3-1)])), 3, D_INFO$nSupp, byrow = TRUE),\n       CRIVAL = pout$fGBest,\n       MAXDISP = dout$maxVal,\n       PSO_CONV = pout$fGBestHist,\n       CPUTIME = cputime,\n       PSO_RESULT = pout,\n       ANSWERING_SET = aout,\n       DISPERSION = dout)\n}\n\n##\ngetD_INFO <- function(model = 1, paraUpper = c(1, 5, 3), paraLower = NULL) {\n  modelInfo <- cbind(c(\"Competitive\", \"Noncompetitive\", \"Uncompetitive\", \"Mixed-type\"),\n                     c(\"Vmax, km, kic\", \"Vmax, km, kic\", \"Vmax, km, kiu\", \"Vmax, km, kic, kiu\"))\n  if (!(model %in% 1:4)) {\n    stop(\"Model Index\\n \n          1: Competitive model\\n 2: noncompetitive model\\n\n          3: Uncompeitive model\\n4: mixed-type model\\n\")\n  }\n  if ((model < 4) & !(length(paraUpper) == 3)) {\n    stop(paste0(\"For \", modelInfo[1,model], \"model, the model parameters are \", modelInfo[2,model]))\n  }\n  if ((model == 4) & !(length(paraUpper) == 4)) {\n    stop(paste0(\"For \", modelInfo[1,model], \"model, the model parameters are \", modelInfo[2,model]))\n  }\n  if (is.null(paraLower)) paraLower <- paraUpper\n  \n  list(model = model, dSupp = 2, \n       nSupp = ifelse(model < 4, 3, 4), \n       dPara = ifelse(model < 4, 3, 4),  \n       dsUpper = c(30, 60), dsLower = c(0, 0), \n       paraUpper = paraUpper, paraLower = paraLower)\n}\n##\ngetPSO_INFO <- function(nSwarm = c(64, 32, 64), maxIter = c(100, 50, 100)) {\n  PSO_INFO <- lapply(1:3, function(i) {\n    list(nSwarm = nSwarm[i], maxIter = maxIter[i], \n         c1 = 2, c2 = 2, vk = 2, w0 = .95, w1 = .2, wv = .8)\n  })\n  names(PSO_INFO) <- c(\"OUTER\", \"INNER\", \"LOCAL\")\n  PSO_INFO\n}\n##\ndrawEquiv <- function(PSORESULT, D_INFO) {\n  \n  nSupp <- D_INFO$nSupp\n  dLB <- D_INFO$dsLower\n  dUB <- D_INFO$dsUpper\n  \n  pout <- PSORESULT$PSO_RESULT\n  dout <- PSORESULT$DISPERSION\n  cL <- 25\n  colormap <- rgb(c(rep(0,1*cL), seq(0,0.95,length=1*cL), 1,      #R\n                    rep(0.95,1*cL), seq(0.95,0.5,length = 1*cL)),   \n                  c(rep(0,1*cL), seq(0,0.9,length=1*cL), 1,\t\t\t\t#G\n                    seq(0.9,0,length=1*cL), rep(0,1*cL)), \n                  c(seq(0.5,0.95,length = 1*cL), rep(0.95,1*cL), 1, #B\n                    seq(0.95,0,length = 1*cL), rep(0,1*cL)), \n                  maxColorValue = 1)\n  \n  cM <- ifelse(max(abs(dout$dispVal)) == 0, 1, max(abs(dout$dispVal)))\n  \n  designOut <- matrix(c(pout$GBest, 1 - sum(pout$GBest[(nSupp*2+1):(nSupp*3-1)])), 3, \n                      nSupp, byrow = TRUE)\n  \n  lay <- layout(matrix(1:2, 1, 2), widths = c(13, 2))\n  par(mar = c(5, 4, 1, 1) + 0.1, las = 1)\n  image(dout$sGrid, dout$iGrid, dout$dispVal, \n        col = colormap, zlim = c(-1,1)*cM, axes = FALSE, xlab = \"[s]\", ylab = \"[i]\")\n  contour(dout$sGrid, dout$iGrid, dout$dispVal, add = TRUE, col = \"gray90\", labcex = 1.2)\n  points(t(designOut[1:2,]), pch = 19, cex = 1.8, col = \"forestgreen\")\n  points(t(designOut[1:2,]), pch = 19, cex = 1.2, col = \"chartreuse1\")\n  axis(1, at = seq(dLB[1], dUB[1], length = 5), labels = seq(dLB[1], dUB[1], length = 5),\n       lty = 0, cex.axis = 1, line = -.5)\n  axis(2, at = seq(dLB[2], dUB[2], length = 5), labels = seq(dLB[2], dUB[2], length = 5),\n       lty = 0, cex.axis = 1, line = -.5)\n  par(mar = c(5, 0, 1, 2) + 0.1, las = 1)\n  image(1, seq(-cM, cM, length = 100), t(as.matrix(seq(-cM, cM, length = 100))), \n        col = colormap, axes = F, xlab = \"\", ylab = \"\", zlim = c(-cM, cM))\n  mtext(round(cM, 1), 3, cex = .8); mtext(-round(cM, 1), 1, cex = .8); mtext(0, 4, cex = .8)\n  \n}",
    "created" : 1492134765824.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "452828307",
    "id" : "E20D68D",
    "lastKnownWriteTime" : 1492137426,
    "last_content_update" : 1492137426737,
    "path" : "D:/stdmmOptDesignInhibition/rOptDesignInhibitionPSO.R",
    "project_path" : "rOptDesignInhibitionPSO.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}